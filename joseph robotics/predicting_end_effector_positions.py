# -*- coding: utf-8 -*-
"""predicting end-effector positions

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dMKz81Vvyp35bDqRPVNcX0DNVUaDpJxC
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dense
from tensorflow.keras.optimizers import Adam
import pandas as pd
import numpy as np
import sklearn
from sklearn import svm
from sklearn.preprocessing import StandardScaler

# Defining  column names
column_names = ['JointAngle1', 'JointAngle2', 'JointAngle3', 'JointAngle4', 'JointAngle5', 'JointAngle6',
                'X_Position', 'Y_Position', 'Z_Position', 'RotationElement1', 'RotationElement2', 'RotationElement3']

# Loading of the dataset with specified column names
data = pd.read_csv('/content/random.csv', names=column_names)

data.head()

data.tail()

X = data.drop(columns=['X_Position', 'Y_Position','Z_Position',])
Y = data[['X_Position', 'Y_Position', 'Z_Position']]

X.head()

Y.head()

# Create a StandardScaler object
scaler = StandardScaler()

X_scaled = scaler.fit_transform(X)
Y_scaled = scaler.fit_transform(Y)

print(X_scaled)

print(Y_scaled)

mean_values = scaler.mean_
scale_values = scaler.scale_

print("Mean Values:", mean_values)
print("Scale Values:", scale_values)

"""# feed dataset into deep neural network"""

# Define your neural network model with a name
model = tf.keras.Sequential(name="my_end_effector_prediction")

# Determine the input size based on the number of features in your dataset
input_size = X_scaled.shape[1]
print("Input size:", input_size)

# Add layers to the model
model.add(tf.keras.layers.Dense(units=128, input_shape=(input_size,), activation='relu'))
model.add(tf.keras.layers.Dropout(0.3))  # Adjust dropout rate
model.add(tf.keras.layers.Dense(units=128, activation='relu'))
model.add(tf.keras.layers.Dropout(0.3))  # Adjust dropout rate
model.add(tf.keras.layers.Dense(units=3, activation='linear'))  # Use linear activation for regression

# Compile the model
model.compile(optimizer='adam',
              loss='mean_squared_error',  # Using mean squared error for regression
              metrics=['mae'])  # Monitor mean absolute error

# Fit the model to the training data
history = model.fit(X_scaled, Y_scaled, epochs=35, batch_size=30, validation_split=0.2)  # Adjust epochs and batch size

# Print the training history
print(history.history.keys())

# Print the final training and validation accuracy
train_mae = history.history['mae'][-1]
val_mae = history.history['val_mae'][-1]
print("Final training MAE:", train_mae)
print("Final validation MAE:", val_mae)

# Save the model to a file
model.save('my_end_effector_prediction')

"""# predicting output based on user input"""

# Load the trained model
model = tf.keras.models.load_model('my_end_effector_prediction')

# Function to preprocess user input
def preprocess_input(input_data):
    # Perform any necessary preprocessing, such as scaling or normalization
    # Make sure to apply the same preprocessing steps used during training

    # If data is already preprocessed
    scaled_input = input_data
    return scaled_input

# Function to predict end-effector positions
def predict_end_effector_position(input_data):
    # Preprocess the input data
    scaled_input = preprocess_input(input_data)

    # Make predictions using the trained model
    predictions = model.predict(scaled_input)

    # Return the predicted end-effector positions
    return predictions

"""# Testing your model"""

# input joint angles and rotation effect to predict your end-effector postions
if __name__ == "__main__":
    # Adjusting  the input shape to match the model's input size (9 features)
    user_input =np.array([[-1.51E+00	,-7.63E-01,1.85E+00,-8.17E-01,9.12E-01,2.32E+00, 0.19059, 0.1345, 0.97241]])


    # Predict end-effector positions
    predicted_positions = predict_end_effector_position(user_input)

    # Print the predicted positions
    print("Predicted end-effector positions based on your inputs :")
    print(predicted_positions)